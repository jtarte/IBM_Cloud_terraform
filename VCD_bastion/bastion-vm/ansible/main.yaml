###############################################################################
# This ansible script automates the configuration of bastion VM
#
# author: Jérôme TARTE
# team: IBM Cloud Deployment Architects (CDA)
# email: jerome.tarte@fr.ibm.com
###############################################################################

---
- hosts: all
  gather_facts: False
  vars:
     myvars: "{{ lookup('file', './ansible_vars.json') }}"
  tasks:
    # register the VM
    - name: Prepare RHEL host entitlement enablement
      shell: "rpm -ivh --replacepkgs http://52.117.132.7/pub/katello-ca-consumer-latest.noarch.rpm"
    
    - name: Generate an uuidgen  
      shell: "uuidgen"
      register: uuid 

    - name: Set inputs by RHEL host entitlement enablement
      shell: "echo '{\"dmi.system.uuid\":\"{{uuid.stdout}}\"}' > /etc/rhsm/facts/uuid_override.facts"
    
    - name: enable RHEL host entitlement
      shell: "subscription-manager register --org=\"customer\" --activationkey=\"{{myvars.rhel_key}}\" --force"

    # configure DNS server on the vm
    - name: install dnsmasq
      yum:
        name:
          - dnsmasq
        state: latest
    
    - name: update dnsmasq.conf
      shell: "echo \"no-dhcp-interface=ens192\" >> /etc/dnsmasq.conf"
    
    - name: update dnsmasq.conf
      shell: "echo \"server=8.8.8.8\" >> /etc/dnsmasq.conf"

    - name: update dnsmasq.conf
      shell: "echo \"server=8.8.4.4\" >> /etc/dnsmasq.conf"

    - name: update dnsmasq.conf
      shell: "echo \"listen-address=127.0.0.1\" >> /etc/dnsmasq.conf"

    - name: update dnsmasq.conf
      shell: "echo \"interface=ens192\" >> /etc/dnsmasq.conf"
    
    - name: update dnsmasq.conf
      shell: "echo \"interface=lo\" >> /etc/dnsmasq.conf"

    - name: update dnsmasq.conf
      shell: "echo \"address=/.apps.{{myvars.ocp_cluster}}.{{myvars.domain}}/{{myvars.lb_ip}}\" >> /etc/dnsmasq.conf"
    
    - name: update etc hosts
      shell: "echo \"{{myvars.lb_ip}} api.{{myvars.ocp_cluster}}.{{myvars.domain}}\" >> /etc/hosts "
      
    - name: update etc hosts
      shell: "echo \"{{myvars.lb_ip}} api-int.{{myvars.ocp_cluster}}.{{myvars.domain}}\" >> /etc/hosts "

    - name: enable dns
      ansible.builtin.systemd:
        name: dnsmasq
        state: restarted
        enabled: yes

    # install additioanl tools
    - name: install tools
      yum:
        name:
          - git
          - unzip
          - tar
          - yum-utils
        state: latest

    # nginx as http server
    - name: Nginx - Copy file with owner and permissions
      ansible.builtin.copy:
        src: ./nginx.repo
        dest: /etc/yum.repos.d/nginx.repo
        mode: '0644'

    - name: Nginx - install 
      yum:
        name: nginx
        state: latest
    
    #upload the nginx config
    - name: Nginx - config - Copy file with owner and permissions
      ansible.builtin.copy:
        src: ./default.conf
        dest: /etc/nginx/conf.d/default.conf
        mode: '0644'

    - name: Nginx - enable 
      ansible.builtin.systemd:
        name: nginx
        state: restarted
        enabled: yes

    # Pull secret copy
    - name: Pull Secret - Copy file 
      ansible.builtin.copy:
        src: "{{ myvars.pull_secret }}"
        dest: /root/.pull-secret
        mode: '0644'

    # terraform cli
    - name: Terraform - repo add 
      shell: "yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo"

    - name: Terraform - install 
      yum:
        name:
          - terraform
    
    # openshift cli
    - name: OC cli - get oc client archive
      get_url:
        url: "http://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-{{myvars.ocp_version}}/openshift-client-linux.tar.gz"
        dest: "/tmp" 

    - name: OC cli - untar oc cli archive
      ansible.builtin.unarchive:
        src: "/tmp/openshift-client-linux.tar.gz"
        dest: "/usr/local/bin"
        remote_src: yes

    # configure firewall on VM
    - name: configure firewall
      shell: "firewall-cmd --add-port=80/tcp --zone=public --permanent"
    
    - name: configure firewall
      shell: "firewall-cmd --add-port=53/tcp --zone=public --permanent"

    - name: configure firewall
      shell: "firewall-cmd --add-port=53/udp --zone=public --permanent"

    - name: configure firewall
      shell: "firewall-cmd --reload"
    
    # check out git repo with OCP terraform script
    - name: git checkout
      git:
        repo: "{{myvars.terraform_ocp_repo}}"
        dest: /opt/terraform
    